{"name":"Rating Service Documentation","tagline":"","body":"Rating service is ebbits general service for storing the ratings of any entity. \r\n\r\nIf the consumer wants to rate an entity this should be a simply procedure, but allow the user to feel that he or she is sharing their experience. On the other hand we need to ensure that the rating can be trusted, i.e. avoid one user sending in multiple ratings and thereby making the rating system unreliable. \r\n\r\nBeside a number from 1-5 and clicking ok, the rating could also contain a user comment and an optional username. This way a user may feel like he or she shared their experience for the common good of other users. These comments should later be view-able for other users.\r\n\r\n### Note:\r\nIn the following examples, the destination address depends on the deployment:\r\n\r\nIf deployed at Heroku, instead of \r\n* [http://localhost:3000/](http://localhost:3000/) \r\nshould be used \r\n* [https://rating-service.herokuapp.com/](https://rating-service.herokuapp.com/)\r\n\r\n## Rating Service supports the following API:\r\n\r\n## `addRating( EventID, EntityID, UserName, Comment, Rating, Credentials): Rating`\r\nCreate new rating for entity with EntityID.\r\n\r\n### `Parameters`\r\n_EventID (optional)_ ID of the event that represents the ranting carried out by the user.\r\n\r\n_EntityID_ UUID of the rated entity.\r\n\r\n_Username (optional)_ Name of the author of the rating.\r\n\r\n_Comment (optional)_ Text describing experience that user wants to share.\r\n\r\n_Rating_ A number from 1-5 - i.e. rating itself.\r\n \r\n_Credentials_ Data necessary for identification and authorization of authority that is using the registration service.\r\n\r\n### `Returns`\r\nThe function returns XML serialization of the successfully registered rating or error message in case of failure.\r\n\r\n### `Example of the request and result`\r\n```\r\ncurl -d \"event_id=7b4f0c96-6c69-4d42-a971-a730c50fea6b&entity_id=905ba16f-c3f0-41d2-a235-8528ac0e234e&username=marek&owner=3&comment=The best piece of meat ever&rating=5\" http://localhost:3000/ratings.xml\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<rating>\r\n  <id type=\"integer\">23</id>\r\n  <event-id type=\"uuid\">7b4f0c96-6c69-4d42-a971-a730c50fea6b</event-id>\r\n  <entity-id type=\"uuid\">905ba16f-c3f0-41d2-a235-8528ac0e234e</entity-id>\r\n  <username>marek</username>\r\n  <comment>The best piece of meat ever</comment>\r\n  <rating type=\"integer\">5</rating>\r\n  <owner-id type=\"integer\" nil=\"true\"/>\r\n  <created-at type=\"dateTime\">2014-12-31T11:34:50Z</created-at>\r\n  <updated-at type=\"dateTime\">2014-12-31T11:34:50Z</updated-at>\r\n</rating>\r\n```\r\n\r\n\r\n\r\n## `getRating( EntityID, Credentials): Hash`\r\nGetting hash with entity id, calculated rating value and list of 10 last comments.\r\n\r\n### `Parameters`\r\n_EbbitsID_  The UUID of the entity for which we search the calculated rating.\r\n\r\n_Credentials_ Data necessary for identification and authorization of authority that is using the registration service.\r\n\r\n### `Returns`\r\nThe function returns XML serialization with the calculated rating for given entity and last 10 comments. The calculated rating is simple average value from all registered ratings for given entity.\r\n\r\n### `Example of the request and result`\r\n```\r\ncurl -d \"entity_id=8c13927e-4ba7-47fe-ba53-0da323b4e998&owner=3\" http://localhost:3000/getRating.xml\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<hash>\r\n  <entityId>8c13927e-4ba7-47fe-ba53-0da323b4e998</entityId>\r\n  <calculatedRating type=\"integer\">4</calculatedRating>\r\n  <comments type=\"array\">\r\n    <comment>\r\n      <username>marek</username>\r\n      <comment>just for testing purposes</comment>\r\n      <rating type=\"integer\">5</rating>\r\n    </comment>\r\n    <comment>\r\n      <username>marek</username>\r\n      <comment>just for testing</comment>\r\n      <rating type=\"integer\">4</rating>\r\n    </comment>\r\n    <comment>\r\n      <username>marek</username>\r\n      <comment>just for testing</comment>\r\n      <rating type=\"integer\">5</rating>\r\n    </comment>\r\n    <comment>\r\n      <username>marek</username>\r\n      <comment>just for testing</comment>\r\n      <rating type=\"integer\">4</rating>\r\n    </comment>\r\n    <comment>\r\n      <username>marek</username>\r\n      <comment>just for testing</comment>\r\n      <rating type=\"integer\">5</rating>\r\n    </comment>\r\n    <comment>\r\n      <username>Name of owner 123456789</username>\r\n      <comment>comment for entity 8c13927e-4ba7-47fe-ba53-0da323b4e998</comment>\r\n      <rating type=\"integer\">3</rating>\r\n    </comment>\r\n  </comments>\r\n</hash>\r\n\r\nor in case of non existing rating\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<hash>\r\n  <error>Rating not found.</error>\r\n</hash>\r\n```\r\n\r\n```\r\ncurl -d \"entity_id=9908f3c5-27ab-4d65-8e95-e6d5c37a4065&owner=3\" http://rating-service.herokuapp.com/getRating.xml\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<hash>\r\n  <entityId>9908f3c5-27ab-4d65-8e95-e6d5c37a4065</entityId>\r\n  <calculatedRating type=\"integer\">2</calculatedRating>\r\n  <comments type=\"array\">\r\n    <comment>\r\n      <username></username>\r\n      <comment>rating for meat cut 1 from bulk beef 1a</comment>\r\n      <rating type=\"integer\">2</rating>\r\n    </comment>\r\n  </comments>\r\n</hash>\r\n```\r\n\r\n\r\n\r\n## `getMeatRating( EntityID, Credentials): Hash`\r\nGetting calculated rating for a given entity that suppose to be a meat cut from a bulk-beef. It contacts Entity Manager, get list of all masters (parents - i.e. IDs of bulk beefs) of given entity and calculates rating from all their children - i.e. meet cuts from the same bulk.\r\n\r\n### `Parameters`\r\n_EbbitsID_  The UUID of the entity of meat cut for which we search for the calculated rating.\r\n\r\n_Credentials_ Data necessary for identification and authorization of authority that is using the registration service.\r\n\r\n### `Returns`\r\nThe function returns XML serialization with the calculated rating for given entity and last 10 comments. The calculated rating is simple average value from all registered ratings for meat cuts of corresponding bulk beef.\r\n\r\n### `Example of the request and result`\r\n```\r\ncurl -d \"entity_id=9908f3c5-27ab-4d65-8e95-e6d5c37a4065&owner=3\" http://rating-service.herokuapp.com/getMeatRating.xml\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<hash>\r\n  <entityId>9908f3c5-27ab-4d65-8e95-e6d5c37a4065</entityId>\r\n  <calculatedRating type=\"integer\">3</calculatedRating>\r\n  <comments type=\"array\">\r\n    <comment>\r\n      <username>marek</username>\r\n      <comment>rating for meat cut 3 from bulk beef 1a</comment>\r\n      <rating type=\"integer\">3</rating>\r\n    </comment>\r\n    <comment>\r\n      <username></username>\r\n      <comment>rating for meat cut 1 from bulk beef 1a</comment>\r\n      <rating type=\"integer\">2</rating>\r\n    </comment>\r\n    <comment>\r\n      <username>marek</username>\r\n      <comment>rating for meat cut 2 from bulk beef 1a</comment>\r\n      <rating type=\"integer\">4</rating>\r\n    </comment>\r\n  </comments>\r\n</hash>\r\n\r\nor in case of non existing master entity - identical to getRating(EntityID)\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<hash>\r\n  <entityId>7c1875d4-a3b3-44f8-986f-0c6f6ec3c008</entityId>\r\n  <calculatedRating type=\"integer\">3</calculatedRating>\r\n  <comments type=\"array\">\r\n    <comment>\r\n      <username>marek</username>\r\n      <comment>some comment is here</comment>\r\n      <rating type=\"integer\">3</rating>\r\n    </comment>\r\n  </comments>\r\n</hash>\r\n\r\nor in case non existing master and non existing rating\r\n\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<hash>\r\n  <error>Rating not found.</error>\r\n</hash>\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}